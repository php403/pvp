// Code generated by entc, DO NOT EDIT.

package app

import (
	"pvp/internal/data/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AppKey applies equality check predicate on the "app_key" field. It's identical to AppKeyEQ.
func AppKey(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppKey), v))
	})
}

// AppScreen applies equality check predicate on the "app_screen" field. It's identical to AppScreenEQ.
func AppScreen(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppScreen), v))
	})
}

// AppStatus applies equality check predicate on the "app_status" field. It's identical to AppStatusEQ.
func AppStatus(v int8) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppStatus), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// AppKeyEQ applies the EQ predicate on the "app_key" field.
func AppKeyEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppKey), v))
	})
}

// AppKeyNEQ applies the NEQ predicate on the "app_key" field.
func AppKeyNEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppKey), v))
	})
}

// AppKeyIn applies the In predicate on the "app_key" field.
func AppKeyIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppKey), v...))
	})
}

// AppKeyNotIn applies the NotIn predicate on the "app_key" field.
func AppKeyNotIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppKey), v...))
	})
}

// AppKeyGT applies the GT predicate on the "app_key" field.
func AppKeyGT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppKey), v))
	})
}

// AppKeyGTE applies the GTE predicate on the "app_key" field.
func AppKeyGTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppKey), v))
	})
}

// AppKeyLT applies the LT predicate on the "app_key" field.
func AppKeyLT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppKey), v))
	})
}

// AppKeyLTE applies the LTE predicate on the "app_key" field.
func AppKeyLTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppKey), v))
	})
}

// AppKeyContains applies the Contains predicate on the "app_key" field.
func AppKeyContains(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAppKey), v))
	})
}

// AppKeyHasPrefix applies the HasPrefix predicate on the "app_key" field.
func AppKeyHasPrefix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAppKey), v))
	})
}

// AppKeyHasSuffix applies the HasSuffix predicate on the "app_key" field.
func AppKeyHasSuffix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAppKey), v))
	})
}

// AppKeyEqualFold applies the EqualFold predicate on the "app_key" field.
func AppKeyEqualFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAppKey), v))
	})
}

// AppKeyContainsFold applies the ContainsFold predicate on the "app_key" field.
func AppKeyContainsFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAppKey), v))
	})
}

// AppScreenEQ applies the EQ predicate on the "app_screen" field.
func AppScreenEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppScreen), v))
	})
}

// AppScreenNEQ applies the NEQ predicate on the "app_screen" field.
func AppScreenNEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppScreen), v))
	})
}

// AppScreenIn applies the In predicate on the "app_screen" field.
func AppScreenIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppScreen), v...))
	})
}

// AppScreenNotIn applies the NotIn predicate on the "app_screen" field.
func AppScreenNotIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppScreen), v...))
	})
}

// AppScreenGT applies the GT predicate on the "app_screen" field.
func AppScreenGT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppScreen), v))
	})
}

// AppScreenGTE applies the GTE predicate on the "app_screen" field.
func AppScreenGTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppScreen), v))
	})
}

// AppScreenLT applies the LT predicate on the "app_screen" field.
func AppScreenLT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppScreen), v))
	})
}

// AppScreenLTE applies the LTE predicate on the "app_screen" field.
func AppScreenLTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppScreen), v))
	})
}

// AppScreenContains applies the Contains predicate on the "app_screen" field.
func AppScreenContains(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAppScreen), v))
	})
}

// AppScreenHasPrefix applies the HasPrefix predicate on the "app_screen" field.
func AppScreenHasPrefix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAppScreen), v))
	})
}

// AppScreenHasSuffix applies the HasSuffix predicate on the "app_screen" field.
func AppScreenHasSuffix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAppScreen), v))
	})
}

// AppScreenEqualFold applies the EqualFold predicate on the "app_screen" field.
func AppScreenEqualFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAppScreen), v))
	})
}

// AppScreenContainsFold applies the ContainsFold predicate on the "app_screen" field.
func AppScreenContainsFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAppScreen), v))
	})
}

// AppStatusEQ applies the EQ predicate on the "app_status" field.
func AppStatusEQ(v int8) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppStatus), v))
	})
}

// AppStatusNEQ applies the NEQ predicate on the "app_status" field.
func AppStatusNEQ(v int8) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppStatus), v))
	})
}

// AppStatusIn applies the In predicate on the "app_status" field.
func AppStatusIn(vs ...int8) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppStatus), v...))
	})
}

// AppStatusNotIn applies the NotIn predicate on the "app_status" field.
func AppStatusNotIn(vs ...int8) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppStatus), v...))
	})
}

// AppStatusGT applies the GT predicate on the "app_status" field.
func AppStatusGT(v int8) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppStatus), v))
	})
}

// AppStatusGTE applies the GTE predicate on the "app_status" field.
func AppStatusGTE(v int8) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppStatus), v))
	})
}

// AppStatusLT applies the LT predicate on the "app_status" field.
func AppStatusLT(v int8) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppStatus), v))
	})
}

// AppStatusLTE applies the LTE predicate on the "app_status" field.
func AppStatusLTE(v int8) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppStatus), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...int16) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...int16) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...int16) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...int16) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...int16) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...int16) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v int16) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		p(s.Not())
	})
}
