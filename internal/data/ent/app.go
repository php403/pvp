// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"pvp/internal/data/ent/app"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// App is the model entity for the App schema.
type App struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AppKey holds the value of the "app_key" field.
	AppKey string `json:"app_key,omitempty"`
	// AppScreen holds the value of the "app_screen" field.
	AppScreen string `json:"app_screen,omitempty"`
	// AppStatus holds the value of the "app_status" field.
	AppStatus int8 `json:"app_status,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime int16 `json:"create_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime int16 `json:"delete_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime int16 `json:"update_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*App) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case app.FieldID, app.FieldAppStatus, app.FieldCreateTime, app.FieldDeleteTime, app.FieldUpdateTime:
			values[i] = &sql.NullInt64{}
		case app.FieldAppKey, app.FieldAppScreen:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type App", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the App fields.
func (a *App) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case app.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case app.FieldAppKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_key", values[i])
			} else if value.Valid {
				a.AppKey = value.String
			}
		case app.FieldAppScreen:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_screen", values[i])
			} else if value.Valid {
				a.AppScreen = value.String
			}
		case app.FieldAppStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_status", values[i])
			} else if value.Valid {
				a.AppStatus = int8(value.Int64)
			}
		case app.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = int16(value.Int64)
			}
		case app.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				a.DeleteTime = int16(value.Int64)
			}
		case app.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = int16(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this App.
// Note that you need to call App.Unwrap() before calling this method if this App
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *App) Update() *AppUpdateOne {
	return (&AppClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the App entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *App) Unwrap() *App {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: App is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *App) String() string {
	var builder strings.Builder
	builder.WriteString("App(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", app_key=")
	builder.WriteString(a.AppKey)
	builder.WriteString(", app_screen=")
	builder.WriteString(a.AppScreen)
	builder.WriteString(", app_status=")
	builder.WriteString(fmt.Sprintf("%v", a.AppStatus))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", a.CreateTime))
	builder.WriteString(", delete_time=")
	builder.WriteString(fmt.Sprintf("%v", a.DeleteTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// Apps is a parsable slice of App.
type Apps []*App

func (a Apps) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
