// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pvp/internal/data/ent/app"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// AppCreate is the builder for creating a App entity.
type AppCreate struct {
	config
	mutation *AppMutation
	hooks    []Hook
}

// SetAppKey sets the "app_key" field.
func (ac *AppCreate) SetAppKey(s string) *AppCreate {
	ac.mutation.SetAppKey(s)
	return ac
}

// SetAppScreen sets the "app_screen" field.
func (ac *AppCreate) SetAppScreen(s string) *AppCreate {
	ac.mutation.SetAppScreen(s)
	return ac
}

// SetNillableAppScreen sets the "app_screen" field if the given value is not nil.
func (ac *AppCreate) SetNillableAppScreen(s *string) *AppCreate {
	if s != nil {
		ac.SetAppScreen(*s)
	}
	return ac
}

// SetAppStatus sets the "app_status" field.
func (ac *AppCreate) SetAppStatus(i int8) *AppCreate {
	ac.mutation.SetAppStatus(i)
	return ac
}

// SetNillableAppStatus sets the "app_status" field if the given value is not nil.
func (ac *AppCreate) SetNillableAppStatus(i *int8) *AppCreate {
	if i != nil {
		ac.SetAppStatus(*i)
	}
	return ac
}

// SetCreateTime sets the "create_time" field.
func (ac *AppCreate) SetCreateTime(i int16) *AppCreate {
	ac.mutation.SetCreateTime(i)
	return ac
}

// SetDeleteTime sets the "delete_time" field.
func (ac *AppCreate) SetDeleteTime(i int16) *AppCreate {
	ac.mutation.SetDeleteTime(i)
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AppCreate) SetUpdateTime(i int16) *AppCreate {
	ac.mutation.SetUpdateTime(i)
	return ac
}

// Mutation returns the AppMutation object of the builder.
func (ac *AppCreate) Mutation() *AppMutation {
	return ac.mutation
}

// Save creates the App in the database.
func (ac *AppCreate) Save(ctx context.Context) (*App, error) {
	var (
		err  error
		node *App
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppCreate) SaveX(ctx context.Context) *App {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ac *AppCreate) defaults() {
	if _, ok := ac.mutation.AppScreen(); !ok {
		v := app.DefaultAppScreen
		ac.mutation.SetAppScreen(v)
	}
	if _, ok := ac.mutation.AppStatus(); !ok {
		v := app.DefaultAppStatus
		ac.mutation.SetAppStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AppCreate) check() error {
	if _, ok := ac.mutation.AppKey(); !ok {
		return &ValidationError{Name: "app_key", err: errors.New("ent: missing required field \"app_key\"")}
	}
	if _, ok := ac.mutation.AppScreen(); !ok {
		return &ValidationError{Name: "app_screen", err: errors.New("ent: missing required field \"app_screen\"")}
	}
	if _, ok := ac.mutation.AppStatus(); !ok {
		return &ValidationError{Name: "app_status", err: errors.New("ent: missing required field \"app_status\"")}
	}
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ac.mutation.DeleteTime(); !ok {
		return &ValidationError{Name: "delete_time", err: errors.New("ent: missing required field \"delete_time\"")}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (ac *AppCreate) sqlSave(ctx context.Context) (*App, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AppCreate) createSpec() (*App, *sqlgraph.CreateSpec) {
	var (
		_node = &App{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: app.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: app.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.AppKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppKey,
		})
		_node.AppKey = value
	}
	if value, ok := ac.mutation.AppScreen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppScreen,
		})
		_node.AppScreen = value
	}
	if value, ok := ac.mutation.AppStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: app.FieldAppStatus,
		})
		_node.AppStatus = value
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: app.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: app.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: app.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	return _node, _spec
}

// AppCreateBulk is the builder for creating many App entities in bulk.
type AppCreateBulk struct {
	config
	builders []*AppCreate
}

// Save creates the App entities in the database.
func (acb *AppCreateBulk) Save(ctx context.Context) ([]*App, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*App, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AppCreateBulk) SaveX(ctx context.Context) []*App {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
